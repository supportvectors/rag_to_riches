# =============================================================================
#  Filename: rag_facade_demo.py
#
#  Short Description: Demo of the new rag() facade method in Animals class.
#
#  Creation date: 2025-01-06
#  Author: Asif Qamar
# =============================================================================

"""
Demo of the new rag() facade method in the Animals class.

This example shows how to use the convenient rag() method that encapsulates
the entire RAG pipeline: search + LLM response in a single method call.
"""

import sys
from pathlib import Path
import time

# Add the src directory to the path so we can import our modules
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from rag_to_riches.corpus.animals import Animals
from rag_to_riches.vectordb.embedded_vectordb import EmbeddedVectorDB
from rag_to_riches.vectordb.embedder import SimpleTextEmbedder
from loguru import logger


def main():
    """Main demo function using the new rag() facade method."""
    print("üéØ RAG Facade Method Demo")
    print("=" * 50)
    
    # Example user queries
    queries = [
        "What do animals teach us about friendship?",
        "How do literary authors view animal companionship?",
        "What is the wisdom about animal loyalty?"
    ]
    
    # Initialize components with retry logic
    print("\nüîç Initializing vector DB and embedder...")
    try:
        vector_db = EmbeddedVectorDB()
        print("   ‚úÖ Vector database connected")
    except Exception as e:
        print(f"   ‚ùå Vector database failed: {str(e)}")
        return None
    
    # Try to initialize embedder with retry logic
    embedder = None
    max_retries = 3
    for attempt in range(max_retries):
        try:
            print(f"   üîÑ Loading embedder (attempt {attempt + 1}/{max_retries})...")
            embedder = SimpleTextEmbedder(model_name="sentence-transformers/all-MiniLM-L6-v2")
            print("   ‚úÖ Embedder loaded successfully")
            break
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Attempt {attempt + 1} failed: {str(e)}")
            if attempt < max_retries - 1:
                print("   üîÑ Retrying in 5 seconds...")
                time.sleep(5)
            else:
                print("   ‚ùå All attempts failed. Trying with default model...")
                try:
                    embedder = SimpleTextEmbedder()  # Use default model
                    print("   ‚úÖ Default embedder loaded successfully")
                except Exception as e2:
                    print(f"   ‚ùå Default embedder also failed: {str(e2)}")
                    return None
    
    if embedder is None:
        print("   ‚ùå Could not initialize any embedder")
        return None
    
    try:
        animals = Animals(vector_db=vector_db, embedder=embedder)
        print("   ‚úÖ Animals class initialized successfully")
    except Exception as e:
        print(f"   ‚ùå Animals class initialization failed: {str(e)}")
        return None
    
    # Demo 1: Structured RAG response
    print("\n" + "="*60)
    print("1Ô∏è‚É£ STRUCTURED RAG RESPONSE")
    print("="*60)
    
    query = queries[0]
    print(f"\nüìù Query: '{query}'")
    
    try:
        # Use the new rag() facade method
        result = animals.rag(
            user_query=query,
            limit=5,
            response_type="structured"
        )
        
        print(f"\n‚úÖ RAG pipeline completed successfully!")
        print(f"   üìä Found {result['query_info']['results_count']} search results")
        print(f"   ü§ñ Generated {result['query_info']['response_type']} LLM response")
        
        # Display the structured response
        print("\n" + "ü§ñ"*20)
        print("ü§ñ LLM RESPONSE")
        print("ü§ñ"*20)
        animals.display_llm_response(result['llm_response'], query)
        
        # Show some search result details
        print(f"\nüìã Search Results Summary:")
        print(f"   ‚Ä¢ Total results: {len(result['search_results'])}")
        if result['search_results']:
            top_result = result['search_results'][0]
            print(f"   ‚Ä¢ Top score: {top_result.score:.3f}")
            print(f"   ‚Ä¢ Top quote: '{top_result.payload.get('content', 'N/A')[:80]}...'")
        
    except Exception as e:
        print(f"   ‚ùå RAG pipeline failed: {str(e)}")
    
    # Demo 2: Simple RAG response
    print("\n" + "="*60)
    print("2Ô∏è‚É£ SIMPLE RAG RESPONSE")
    print("="*60)
    
    query = queries[1]
    print(f"\nüìù Query: '{query}'")
    
    try:
        # Use the new rag() facade method with simple response
        result = animals.rag(
            user_query=query,
            limit=3,
            response_type="simple"
        )
        
        print(f"\n‚úÖ RAG pipeline completed successfully!")
        print(f"   üìä Found {result['query_info']['results_count']} search results")
        print(f"   ü§ñ Generated {result['query_info']['response_type']} LLM response")
        
        # Display the simple response
        print("\n" + "ü§ñ"*20)
        print("ü§ñ LLM RESPONSE")
        print("ü§ñ"*20)
        print(result['llm_response'])
        
    except Exception as e:
        print(f"   ‚ùå RAG pipeline failed: {str(e)}")
    
    # Demo 3: Filtered RAG response
    print("\n" + "="*60)
    print("3Ô∏è‚É£ FILTERED RAG RESPONSE")
    print("="*60)
    
    query = queries[2]
    print(f"\nüìù Query: '{query}' (filtered by 'Famous Literary Passages')")
    
    try:
        # Use the new rag() facade method with category filter
        result = animals.rag(
            user_query=query,
            limit=5,
            category="Famous Literary Passages",
            response_type="structured"
        )
        
        print(f"\n‚úÖ RAG pipeline completed successfully!")
        print(f"   üìä Found {result['query_info']['results_count']} search results")
        print(f"   üè∑Ô∏è  Filtered by category: {result['query_info']['category_filter']}")
        print(f"   ü§ñ Generated {result['query_info']['response_type']} LLM response")
        
        # Display the structured response
        print("\n" + "ü§ñ"*20)
        print("ü§ñ LLM RESPONSE")
        print("ü§ñ"*20)
        animals.display_llm_response(result['llm_response'], query)
        
    except Exception as e:
        print(f"   ‚ùå RAG pipeline failed: {str(e)}")
    
    # Demo 4: Access to all RAG components
    print("\n" + "="*60)
    print("4Ô∏è‚É£ ACCESSING RAG COMPONENTS")
    print("="*60)
    
    query = "animal wisdom"
    print(f"\nüìù Query: '{query}'")
    
    try:
        # Use the new rag() facade method
        result = animals.rag(
            user_query=query,
            limit=3,
            response_type="structured"
        )
        
        print(f"\n‚úÖ RAG pipeline completed successfully!")
        
        # Show all available components
        print(f"\nüìã Available RAG Components:")
        print(f"   ‚Ä¢ LLM Response: {type(result['llm_response']).__name__}")
        print(f"   ‚Ä¢ Search Results: {len(result['search_results'])} items")
        print(f"   ‚Ä¢ RAG Context: {len(result['rag_context'])} characters")
        print(f"   ‚Ä¢ Query Info: {len(result['query_info'])} fields")
        
        # Show query info details
        print(f"\nüîç Query Information:")
        for key, value in result['query_info'].items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        # Show RAG context preview
        print(f"\nüìù RAG Context Preview (first 200 chars):")
        print(f"   {result['rag_context'][:200]}...")
        
    except Exception as e:
        print(f"   ‚ùå RAG pipeline failed: {str(e)}")
    
    print("\n" + "="*60)
    print("üéâ RAG Facade Demo Completed!")
    print("="*60)
    
    print("\nüí° Key Benefits of the rag() method:")
    print("   ‚úÖ Single method call for complete RAG pipeline")
    print("   ‚úÖ Returns both LLM response and search results")
    print("   ‚úÖ Supports both structured and simple responses")
    print("   ‚úÖ Includes all filtering options")
    print("   ‚úÖ Provides access to RAG context and query metadata")
    print("   ‚úÖ Comprehensive error handling")
    
    return True


if __name__ == "__main__":
    try:
        # Run the main example
        success = main()
        
        if success is None:
            print("\n‚ùå Demo could not complete due to initialization issues.")
            print("üí° Troubleshooting tips:")
            print("   ‚Ä¢ Check your internet connection")
            print("   ‚Ä¢ Try running the demo again (network issues can be temporary)")
            print("   ‚Ä¢ Ensure the vector database is accessible")
            print("   ‚Ä¢ Check if the animals collection exists and has data")
            sys.exit(1)
        
        print("\n‚úÖ Demo completed successfully!")
        
    except Exception as e:
        logger.error(f"Demo failed: {str(e)}")
        print(f"‚ùå Demo failed: {str(e)}")
        sys.exit(1)


#============================================================================================ 