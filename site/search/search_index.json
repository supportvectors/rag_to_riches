{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-description","title":"Project Description","text":"<p>An intuitive, fast-paced introduction to Retrieval Augmented Generation (RAG)</p>"},{"location":"notebooks/supportvectors-common/","title":"Supportvectors common","text":"<pre><code>%%html\n\n&lt;!-- Many of the styles here are inspired by: \n    https://towardsdatascience.com/10-practical-tips-you-need-to-know-to-personalize-jupyter-notebook-fbd202777e20 \n\n\n    On the author's local machine, these exist in the custom.css file. However, in order to keep uniform look and feel, \n    and at the request of participants, I have added it to this common import-file here.\n\n    --&gt;\n&lt;link href=\"https://fonts.googleapis.com/css?family=Lora:400,700|Montserrat:300\" rel=\"stylesheet\"/&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Crimson+Pro&amp;amp;family=Literata&amp;amp;display=swap\" rel=\"stylesheet\"/&gt;\n&lt;style&gt;\n\n\n#ipython_notebook::before{\n content:\"Neural Architectures\";\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        font-family: 'Lora',serif;\n        font-size:16pt;\n        margin-bottom:15px;\n        margin-top:15px;\n\n}\nbody &gt; #header {\n    #background: #D15555;\n    background: linear-gradient(to bottom, indianred 0%, #fff 100%);\n    opacity: 0.8;\n\n}\n\n\n.navbar-default .navbar-nav &gt; li &gt; a, #kernel_indicator {\n    color: white;\n    transition: all 0.25s;\n    font-size:10pt;\n    font-family: sans-serif;\n    font-weight:normal;\n}\n.navbar-default {\n    padding-left:100px;\n    background: none;\n    border: none;\n}\n\n\nbody &gt; menubar-container {\n    background-color: wheat;\n}\n#ipython_notebook img{                                                                                        \n    display:block; \n\n    background: url(\"https://www.supportvectors.com/wp-content/uploads/2016/03/logo-poster-smaller.png\") no-repeat;\n    background-size: contain;\n\n    padding-left: 600px;\n    padding-right: 100px;\n\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\n\n\nbody {\n #font-family:  'Literata', serif;\n    font-family:'Lora', san-serif;\n    text-align: justify;\n    font-weight: 400;\n    font-size: 12pt;\n}\n\niframe{\n    width:100%;\n    min-height:600px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n# font-family: 'Montserrat', sans-serif;\n font-family:'Lora', serif;\n font-weight: 200;\n text-transform: uppercase;\n color: #EC7063 ;\n}\n\nh2 {\n    color: #000080;\n}\n\n.checkpoint_status, .autosave_status {\n    color:wheat;\n}\n\n#notebook_name {\n    font-weight: 600;\n    font-size:20pt;\n    text-variant:uppercase;\n    color: wheat; \n    margin-right:20px;\n    margin-left:-500px;\n}\n#notebook_name:hover {\nbackground-color: salmon;\n}\n\n\n.dataframe { /* dataframe atau table */\n    background: white;\n    box-shadow: 0px 1px 2px #bbb;\n}\n.dataframe thead th, .dataframe tbody td {\n    text-align: center;\n    padding: 1em;\n}\n\n.checkpoint_status, .autosave_status {\n    color:wheat;\n}\n\n.output {\n    align-items: center;\n}\n\ndiv.cell {\n    transition: all 0.25s;\n    border: none;\n    position: relative;\n    top: 0;\n}\ndiv.cell.selected, div.cell.selected.jupyter-soft-selected {\n    border: none;\n    background: transparent;\n    box-shadow: 0 6px 18px #aaa;\n    z-index: 10;\n    top: -10px;\n}\n.CodeMirror pre, .CodeMirror-dialog, .CodeMirror-dialog .CodeMirror-search-field, .terminal-app .terminal {\n    font-family: 'Hack' , serif; \n    font-weight: 500;\n    font-size: 14pt;\n}\n\n\n\n&lt;/style&gt;    \n</code></pre> <pre><code># Starting with the standard imports\nimport numpy as np\nimport pandas as pd\n\n\n\n# Preprocessing data\nfrom sklearn.model_selection import train_test_split     # data-splitter\nfrom sklearn.preprocessing import StandardScaler         # data-normalization\nfrom sklearn.preprocessing import PolynomialFeatures     # for polynomials\nfrom sklearn.preprocessing import PowerTransformer       # for power-transformations\nfrom sklearn.pipeline import make_pipeline               # for pipelines\nnp.random.seed (42)                                      # for reproducible results\n\n#\n# Modeling and Metrics\n# \n# --For Regressor\nfrom sklearn.dummy import DummyRegressor                 # baseline regressor (null-hypothesis)\nfrom sklearn.linear_model import LinearRegression        # linear regression\nfrom sklearn.linear_model import ( Ridge, \n                                  Lasso, \n                                  ElasticNet,\n                                 RidgeCV, \n                                 LassoCV,\n                                 ElasticNetCV)           # regularized regressions with CV\nfrom sklearn.metrics import mean_squared_error, r2_score # model-metrics\nfrom sklearn.ensemble import RandomForestRegressor\n\n#\n# For Classifiers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.dummy import (DummyClassifier, DummyRegressor)\n\n#\n# For clusterers\nfrom scipy import stats, integrate\nimport sklearn.cluster as cluster\nfrom sklearn.cluster import (DBSCAN, KMeans)\nfrom sklearn import metrics\nfrom sklearn.datasets import make_blobs\n\n# Yellowbrick\n#from yellowbrick.features import FeatureImportances\n#from yellowbrick.classifier import ConfusionMatrix, ClassificationReport, ROCAUC\n\n\nfrom matplotlib import colors\nimport seaborn as sns\nlist_of_cmaps=['Blues','Greens','Reds','Purples']   # some colors to use\n\n# Now the Graphical libraries imports and settings\n%matplotlib inline\nimport matplotlib.pyplot as plt                          # for plotting\nimport seaborn as sns                                    # nicer looking plots\nimport altair as alt                                     # for interactive plots\nimport plotly.express as px                              # for plotly express\nfrom matplotlib import colors                            # for web-color specs\npd.set_option('plotting.backend', 'matplotlib')          # pandas_bokeh, plotly, etc       \nplt.rcParams[ 'figure.figsize' ] = '20,10'               # landscape format figures\nplt.rcParams[ 'legend.fontsize' ] = 13                   # legend font size\nplt.rcParams[ 'axes.labelsize' ] = 13                    # axis label font size\nplt.rcParams['figure.dpi'] = 144                         # high-dpi monitors support\nplt.style.use ('ggplot')                                 # emulate ggplot style\n\n# For latex-quality, i.e., publication quality legends and labels on graphs.\n# Warning: you must have installed LaTeX on your system.\nfrom matplotlib import rc\nrc ('font', family='serif')\nrc ('text', usetex=False) # Enable it selectively \nrc ('font', size=16)\n\n# For youtube video display\nfrom IPython.display import YouTubeVideo\n\nimport warnings\nwarnings.filterwarnings ('ignore')  # suppress warning\n</code></pre> <pre><code>%%capture\n# The automated EDA tools\n#import dataprep \n#import ydata_profiling # replacement for pandas_profiling\n#import pandas_profiling # to be deprecated\n#import autoviz \n#import dtale\n#import sweetviz\n</code></pre> <pre><code>def sv_table_styles():\n\n    th_props = [\n      ('font-size', '11pt'),\n        ('font-family', 'sans'),\n      ('text-align', 'center'),\n      ('font-weight', '300'),\n      ('color', 'cornsilk'),\n      ('background-color', 'salmon')\n      ]\n    # Set CSS properties for td elements in dataframe\n    td_props = [\n      ('font-size', '10px'),\n      #('color', 'cornsilk'),\n        ('font-weight', 'normal')\n      ]\n\n    # Currently, could not make this work!\n    first_col_props = [\n        ('background-color', 'cornsilk'),\n        ('color', 'black'),\n        ('font-weight', '300'),\n    ]\n\n    # Set table styles\n    styles = [\n      dict(selector=\"th\", props=th_props),\n      dict(selector=\"td\", props=td_props),\n      dict(selection=\"tr td:first-child()\", props=first_col_props)\n      ]\n\n    return styles\n</code></pre> <pre><code>#\n# Rotate Pandas dataframe column headers.\n# Taken from:\n# https://stackoverflow.com/questions/46715736/rotating-the-column-name-for-a-panda-dataframe\n#\ndef format_vertical_headers(df):\n    \"\"\"Display a dataframe with vertical column headers\"\"\"\n    styles = [\n        dict(selector=\"th\", props=[('width', '40px')]),\n              dict(selector=\"th.col_heading\",\n                   props=[(\"writing-mode\", \"vertical-rl\"),\n                          ('transform', 'rotateZ(180deg)'), \n                          ('height', '160px'),\n                          ('vertical-align', 'top')])]\n    return (df.fillna('').style.set_table_styles(styles))\n</code></pre> <pre><code>def use_default_plot_style(enable_tex:str = True) -&amp;gt; None:\n    default_plot_style = {\n                    \"text.usetex\": enable_tex,\n                    \"legend.fontsize\": 10,\n                    \"axes.labelsize\": 16,\n                    \"figure.dpi\": 144,\n                    'font.family': 'DejaVu Sans', # 'Lora,serif'\n                    'font.weight':'bold',\n            }\n    plt.rcParams.update(default_plot_style)\n    plt.style.use('ggplot')\n\nuse_default_plot_style(False) # set this to True if you have latex installed\n</code></pre> <pre><code>message = \"\"\"\n&lt;div style=\"color:#aaa;font-size:8pt\"&gt;\n&lt;hr/&gt;\n\u00a9 SupportVectors. All rights reserved. &lt;blockquote&gt;This notebook is the intellectual property of SupportVectors, and part of its training material. \nOnly the participants in SupportVectors workshops are allowed to study the notebooks for educational purposes currently, but is prohibited from copying or using it for any other purposes without written permission.\n\n&lt;b&gt; These notebooks are chapters and sections from Asif Qamar's textbook that he is writing on Data Science. So we request you to not circulate the material to others.&lt;/b&gt;\n&lt;/blockquote&gt;\n&lt;hr/&gt;\n&lt;/div&gt;\n\n\"\"\"\nfrom IPython.display import Markdown\n\ndef copyrights() -&amp;gt; None:\n     display (Markdown(message))\n</code></pre> <pre><code>copyrights()\n</code></pre>    \u00a9 SupportVectors. All rights reserved. This notebook is the intellectual property of SupportVectors, and part of its training material.  Only the participants in SupportVectors workshops are allowed to study the notebooks for educational purposes currently, but is prohibited from copying or using it for any other purposes without written permission.  <p> These notebooks are chapters and sections from Asif Qamar's textbook that he is writing on Data Science. So we request you to not circulate the material to others.</p> <pre><code>import os\nimport sys\nfrom pathlib import Path\n\ndef add_svlib():\n\n    current_dir = str(Path.cwd().resolve())\n\n    # Add parent directory to the python path.\n    parent_dir = str(Path.cwd().parent.parent.resolve())+\"/src\"\n\n    if parent_dir not in sys.path:\n        sys.path.append(parent_dir)\n</code></pre> <pre><code>add_svlib()\n</code></pre> <pre><code>from dotenv import load_dotenv\nload_dotenv(override=True)\n</code></pre>"},{"location":"notebooks/supportvectors-common/#importing-the-necessary-libraries","title":"IMPORTING THE NECESSARY LIBRARIES\u00b6","text":""},{"location":"project-guide/tips-and-tricks/cuda-hell/","title":"Some tips and tricks to deal with the CUDA hell","text":"<p>These are some tips and tricks that may be helpful while dealing with CUDA.</p>"},{"location":"project-guide/tips-and-tricks/cuda-hell/#install-the-cuda-toolkit","title":"Install the cuda-toolkit","text":"<p>It is important to remember that one must install the cuda-toolkit, and set the CUDA_HOME environment variable, in order for some critical tools, such as <code>vLLM</code> to work. To do this, follow the instructions at: CUDA installation guide on Linux</p>"},{"location":"project-guide/tips-and-tricks/cuda-hell/#flush-cuda-memory-from-python-code","title":"Flush cuda memory from Python code","text":"<p>It is helpful to start all Python code that uses CUDA with the following mantra invocation:</p> <pre><code>import torch, gc\ngc.collect()\ntorch.cuda.empty_cache()\n</code></pre> <p>Despite this invocation, quite often it will not completely flush the cuda memory. In that case, a better invocation at the level of the Linux shell is:</p> <p><pre><code>nvidia-smi | grep 'python' | awk '{ print $5 }' | xargs -n1 kill -9\n</code></pre> This pearl of wisdom is gleaned from: How to flush GPU memory using CUDA </p> <p>If you're still hitting unexpected memory errors or similar problems then try:</p> <pre><code>sudo fuser -v /dev/nvidia* | cut -d' ' -f2- | sudo xargs -n1 kill -9\n</code></pre>"},{"location":"project-guide/tips-and-tricks/cuda-hell/#nvtop-is-your-friend","title":"<code>nvtop</code> is your friend!","text":"<p>A very useful and visual tool to see what is happening in CUDA is to use the tool <code>nvtop</code>. Install it with the mantra:</p> <p><pre><code>sudo dnf install nvtop\n</code></pre> (or its equivalent if you foolishly use anything other than redhat/centos/rocky-linux).</p>"}]}